//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v9.0.0.1)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Test.Data.Weather.WeatherService
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v9.0.0.1))")]
    public partial class Client 
    {
        private string _baseUrl = "https://api.weatherbit.io/v1.0";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns a Current Observation - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentObsGroup> CurrentAsync(double lat, double lon, Units? units, Lang? lang, string callback, string key)
        {
            return CurrentAsync(lat, lon, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a Current Observation - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrentObsGroup> CurrentAsync(double lat, double lon, Units? units, Lang? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (lat == null)
                throw new System.ArgumentNullException("lat");
    
            if (lon == null)
                throw new System.ArgumentNullException("lon");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/current?");
            urlBuilder_.Append("lat=").Append(System.Uri.EscapeDataString(ConvertToString(lat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("lon=").Append(System.Uri.EscapeDataString(ConvertToString(lon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrentObsGroup); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a current observation by city id.</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentObsGroup> CityAsync(string city_id, Units2? units, Lang2? lang, string callback, string key)
        {
            return CityAsync(city_id, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a current observation by city id.</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrentObsGroup> CityAsync(string city_id, Units2? units, Lang2? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city_id == null)
                throw new System.ArgumentNullException("city_id");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/current/city?");
            urlBuilder_.Append("city_id=").Append(System.Uri.EscapeDataString(ConvertToString(city_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrentObsGroup); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a current observation by postal code.</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentObsGroup> PostalAsync(string postal_code, string country, Units3? units, Lang3? lang, string callback, string key)
        {
            return PostalAsync(postal_code, country, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a current observation by postal code.</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrentObsGroup> PostalAsync(string postal_code, string country, Units3? units, Lang3? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (postal_code == null)
                throw new System.ArgumentNullException("postal_code");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/current/postal?");
            urlBuilder_.Append("postal_code=").Append(System.Uri.EscapeDataString(ConvertToString(postal_code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrentObsGroup); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a group of observations given a list of cities</summary>
        /// <param name="cities">Comma separated list of City ID's. Example: 4487042, 4494942, 4504871</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentObsGroup> CitiesAsync(string cities, Units4? units, Lang4? lang, string callback, string key)
        {
            return CitiesAsync(cities, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a group of observations given a list of cities</summary>
        /// <param name="cities">Comma separated list of City ID's. Example: 4487042, 4494942, 4504871</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrentObsGroup> CitiesAsync(string cities, Units4? units, Lang4? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (cities == null)
                throw new System.ArgumentNullException("cities");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/current/cities?");
            urlBuilder_.Append("cities=").Append(System.Uri.EscapeDataString(ConvertToString(cities, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrentObsGroup); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a Current Observation - Given City and/or State, Country.</summary>
        /// <param name="city">City search.. Example - &city=Raleigh,NC or &city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentObsGroup> GeosearchAsync(string city, string state, string country, Units5? units, Lang5? lang, string callback, string key)
        {
            return GeosearchAsync(city, state, country, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a Current Observation - Given City and/or State, Country.</summary>
        /// <param name="city">City search.. Example - &city=Raleigh,NC or &city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrentObsGroup> GeosearchAsync(string city, string state, string country, Units5? units, Lang5? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city == null)
                throw new System.ArgumentNullException("city");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/current/geosearch?");
            urlBuilder_.Append("city=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (state != null) 
            {
                urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrentObsGroup); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a Current Observation - Given an IP address, or auto.</summary>
        /// <param name="ip">IP Address, or auto. Example: ip=auto</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentObsGroup> IpAsync(string ip, Units6? units, Lang6? lang, string callback, string key)
        {
            return IpAsync(ip, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a Current Observation - Given an IP address, or auto.</summary>
        /// <param name="ip">IP Address, or auto. Example: ip=auto</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback - Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrentObsGroup> IpAsync(string ip, Units6? units, Lang6? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (ip == null)
                throw new System.ArgumentNullException("ip");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/current/ip?");
            urlBuilder_.Append("ip=").Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrentObsGroup); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a Current Observation. - Given a station ID.</summary>
        /// <param name="station">Station Call ID.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentObsGroup> StationAsync(string station, Units7? units, Lang7? lang, string callback, string key)
        {
            return StationAsync(station, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a Current Observation. - Given a station ID.</summary>
        /// <param name="station">Station Call ID.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrentObsGroup> StationAsync(string station, Units7? units, Lang7? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (station == null)
                throw new System.ArgumentNullException("station");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/current/station?");
            urlBuilder_.Append("station=").Append(System.Uri.EscapeDataString(ConvertToString(station, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrentObsGroup); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a group of observations given a list of stations</summary>
        /// <param name="stations">Comma separated list of Station Call ID's. Example: KRDU,KBFI,KVNY</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CurrentObsGroup> StationsAsync(string stations, Units8? units, Lang8? lang, string callback, string key)
        {
            return StationsAsync(stations, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a group of observations given a list of stations</summary>
        /// <param name="stations">Comma separated list of Station Call ID's. Example: KRDU,KBFI,KVNY</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Observation Group object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CurrentObsGroup> StationsAsync(string stations, Units8? units, Lang8? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (stations == null)
                throw new System.ArgumentNullException("stations");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/current/stations?");
            urlBuilder_.Append("stations=").Append(System.Uri.EscapeDataString(ConvertToString(stations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CurrentObsGroup); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a 3-hourly forecast - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="days">Number of days to return. Default 5.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> 3hourlyAsync(double lat, double lon, double? days, Units9? units, Lang9? lang, string callback, string key)
        {
            return 3hourlyAsync(lat, lon, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a 3-hourly forecast - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="days">Number of days to return. Default 5.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> 3hourlyAsync(double lat, double lon, double? days, Units9? units, Lang9? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (lat == null)
                throw new System.ArgumentNullException("lat");
    
            if (lon == null)
                throw new System.ArgumentNullException("lon");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/3hourly?");
            urlBuilder_.Append("lat=").Append(System.Uri.EscapeDataString(ConvertToString(lat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("lon=").Append(System.Uri.EscapeDataString(ConvertToString(lon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a 3-hourly forecast - Given a City ID.</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="days">Number of days to return. Default 5.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> City2Async(int city_id, double? days, Units10? units, Lang10? lang, string callback, string key)
        {
            return City2Async(city_id, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a 3-hourly forecast - Given a City ID.</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="days">Number of days to return. Default 5.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> City2Async(int city_id, double? days, Units10? units, Lang10? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city_id == null)
                throw new System.ArgumentNullException("city_id");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/3hourly/city?");
            urlBuilder_.Append("city_id=").Append(System.Uri.EscapeDataString(ConvertToString(city_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a 3-hourly forecast - Given a Postal Code.</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="days">Number of days to return. Default 5.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> Postal2Async(int postal_code, string country, double? days, Units11? units, Lang11? lang, string callback, string key)
        {
            return Postal2Async(postal_code, country, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a 3-hourly forecast - Given a Postal Code.</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="days">Number of days to return. Default 5.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> Postal2Async(int postal_code, string country, double? days, Units11? units, Lang11? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (postal_code == null)
                throw new System.ArgumentNullException("postal_code");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/3hourly/postal?");
            urlBuilder_.Append("postal_code=").Append(System.Uri.EscapeDataString(ConvertToString(postal_code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a 3-hourly forecast - Given City and/or State, Country.</summary>
        /// <param name="city">City search.. Example - &city=Raleigh,NC or &city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="days">Number of days to return. Default 5.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> Geosearch2Async(string city, string state, string country, double? days, Units12? units, Lang12? lang, string callback, string key)
        {
            return Geosearch2Async(city, state, country, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a 3-hourly forecast - Given City and/or State, Country.</summary>
        /// <param name="city">City search.. Example - &city=Raleigh,NC or &city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="days">Number of days to return. Default 5.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> Geosearch2Async(string city, string state, string country, double? days, Units12? units, Lang12? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city == null)
                throw new System.ArgumentNullException("city");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/3hourly/geosearch?");
            urlBuilder_.Append("city=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (state != null) 
            {
                urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a 3hourly forecast - Given an IP Address, or ip=auto for automatic IP lookup.</summary>
        /// <param name="ip">IP address, or auto. Example: ip=auto</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> Ip2Async(string ip, double? days, Units13? units, Lang13? lang, string callback, string key)
        {
            return Ip2Async(ip, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a 3hourly forecast - Given an IP Address, or ip=auto for automatic IP lookup.</summary>
        /// <param name="ip">IP address, or auto. Example: ip=auto</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> Ip2Async(string ip, double? days, Units13? units, Lang13? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (ip == null)
                throw new System.ArgumentNullException("ip");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/3hourly/ip?");
            urlBuilder_.Append("ip=").Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a daily forecast - Given Lat/Lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastDay> DailyAsync(double lat, double lon, double? days, Units14? units, Lang14? lang, string callback, string key)
        {
            return DailyAsync(lat, lon, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a daily forecast - Given Lat/Lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastDay> DailyAsync(double lat, double lon, double? days, Units14? units, Lang14? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (lat == null)
                throw new System.ArgumentNullException("lat");
    
            if (lon == null)
                throw new System.ArgumentNullException("lon");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/daily?");
            urlBuilder_.Append("lat=").Append(System.Uri.EscapeDataString(ConvertToString(lat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("lon=").Append(System.Uri.EscapeDataString(ConvertToString(lon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a daily forecast - Given a City ID.</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastDay> City3Async(int city_id, double? days, Units15? units, Lang15? lang, string callback, string key)
        {
            return City3Async(city_id, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a daily forecast - Given a City ID.</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastDay> City3Async(int city_id, double? days, Units15? units, Lang15? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city_id == null)
                throw new System.ArgumentNullException("city_id");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/daily/city?");
            urlBuilder_.Append("city_id=").Append(System.Uri.EscapeDataString(ConvertToString(city_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a daily forecast - Given a Postal Code.</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastDay> Postal3Async(int postal_code, string country, double? days, Units16? units, Lang16? lang, string callback, string key)
        {
            return Postal3Async(postal_code, country, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a daily forecast - Given a Postal Code.</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastDay> Postal3Async(int postal_code, string country, double? days, Units16? units, Lang16? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (postal_code == null)
                throw new System.ArgumentNullException("postal_code");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/daily/postal?");
            urlBuilder_.Append("postal_code=").Append(System.Uri.EscapeDataString(ConvertToString(postal_code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a daily forecast - Given City and/or State, Country.</summary>
        /// <param name="city">City search. Example: city=Raleigh,NC OR city=Raleigh</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastDay> Geosearch3Async(string city, string state, string country, double? days, Units17? units, Lang17? lang, string callback, string key)
        {
            return Geosearch3Async(city, state, country, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a daily forecast - Given City and/or State, Country.</summary>
        /// <param name="city">City search. Example: city=Raleigh,NC OR city=Raleigh</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastDay> Geosearch3Async(string city, string state, string country, double? days, Units17? units, Lang17? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city == null)
                throw new System.ArgumentNullException("city");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/daily/geosearch?");
            urlBuilder_.Append("city=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (state != null) 
            {
                urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a daily forecast - Given an IP Address, or ip=auto for automatic IP lookup.</summary>
        /// <param name="ip">IP address, or auto. Example: ip=auto</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastDay> Ip3Async(string ip, double? days, Units18? units, Lang18? lang, string callback, string key)
        {
            return Ip3Async(ip, days, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a daily forecast - Given an IP Address, or ip=auto for automatic IP lookup.</summary>
        /// <param name="ip">IP address, or auto. Example: ip=auto</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastDay> Ip3Async(string ip, double? days, Units18? units, Lang18? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (ip == null)
                throw new System.ArgumentNullException("ip");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/daily/ip?");
            urlBuilder_.Append("ip=").Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns 48 hour (hourly) forecast - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> HourlyAsync(double lat, double lon, Units19? units, Lang19? lang, string callback, string key, int? hours)
        {
            return HourlyAsync(lat, lon, units, lang, callback, key, hours, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns 48 hour (hourly) forecast - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> HourlyAsync(double lat, double lon, Units19? units, Lang19? lang, string callback, string key, int? hours, System.Threading.CancellationToken cancellationToken)
        {
            if (lat == null)
                throw new System.ArgumentNullException("lat");
    
            if (lon == null)
                throw new System.ArgumentNullException("lon");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/hourly?");
            urlBuilder_.Append("lat=").Append(System.Uri.EscapeDataString(ConvertToString(lat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("lon=").Append(System.Uri.EscapeDataString(ConvertToString(lon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (hours != null) 
            {
                urlBuilder_.Append("hours=").Append(System.Uri.EscapeDataString(ConvertToString(hours, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a 48 hour (hourly) forecast - Given a City ID.</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> City4Async(int city_id, Units20? units, Lang20? lang, string callback, int? hours, string key)
        {
            return City4Async(city_id, units, lang, callback, hours, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a 48 hour (hourly) forecast - Given a City ID.</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> City4Async(int city_id, Units20? units, Lang20? lang, string callback, int? hours, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city_id == null)
                throw new System.ArgumentNullException("city_id");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/hourly/city?");
            urlBuilder_.Append("city_id=").Append(System.Uri.EscapeDataString(ConvertToString(city_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hours != null) 
            {
                urlBuilder_.Append("hours=").Append(System.Uri.EscapeDataString(ConvertToString(hours, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a 48 hour (hourly) forecast - Given a Postal Code.</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> Postal4Async(int postal_code, string country, Units21? units, Lang21? lang, string callback, int? hours, string key)
        {
            return Postal4Async(postal_code, country, units, lang, callback, hours, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a 48 hour (hourly) forecast - Given a Postal Code.</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example - callback=func</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> Postal4Async(int postal_code, string country, Units21? units, Lang21? lang, string callback, int? hours, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (postal_code == null)
                throw new System.ArgumentNullException("postal_code");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/hourly/postal?");
            urlBuilder_.Append("postal_code=").Append(System.Uri.EscapeDataString(ConvertToString(postal_code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hours != null) 
            {
                urlBuilder_.Append("hours=").Append(System.Uri.EscapeDataString(ConvertToString(hours, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns an 48 hour (hourly forecast) - Given City and/or State, Country.</summary>
        /// <param name="city">City search. Example: &city=Raleigh,NC or &city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> Geosearch4Async(string city, string state, string country, Units22? units, Lang22? lang, string callback, int? hours, string key)
        {
            return Geosearch4Async(city, state, country, units, lang, callback, hours, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns an 48 hour (hourly forecast) - Given City and/or State, Country.</summary>
        /// <param name="city">City search. Example: &city=Raleigh,NC or &city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> Geosearch4Async(string city, string state, string country, Units22? units, Lang22? lang, string callback, int? hours, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city == null)
                throw new System.ArgumentNullException("city");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/hourly/geosearch?");
            urlBuilder_.Append("city=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (state != null) 
            {
                urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hours != null) 
            {
                urlBuilder_.Append("hours=").Append(System.Uri.EscapeDataString(ConvertToString(hours, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns an Geolocation object.</summary>
        /// <param name="ip">IP address</param>
        /// <param name="callback">Wraps return in jsonp callback</param>
        /// <param name="exclude">exclude=all => return IP address only</param>
        /// <param name="format">&format=none => return IP address as string</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A geolocation object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GeoIPObj> Ip4Async(string ip, string callback, string exclude, string format, string key)
        {
            return Ip4Async(ip, callback, exclude, format, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns an Geolocation object.</summary>
        /// <param name="ip">IP address</param>
        /// <param name="callback">Wraps return in jsonp callback</param>
        /// <param name="exclude">exclude=all => return IP address only</param>
        /// <param name="format">&format=none => return IP address as string</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A geolocation object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GeoIPObj> Ip4Async(string ip, string callback, string exclude, string format, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ip?");
            if (ip != null) 
            {
                urlBuilder_.Append("ip=").Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exclude != null) 
            {
                urlBuilder_.Append("exclude=").Append(System.Uri.EscapeDataString(ConvertToString(exclude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (format != null) 
            {
                urlBuilder_.Append("format=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GeoIPObj); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GeoIPObj>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a hourly forecast - Given an IP Address, or ip=auto for automatic IP lookup.</summary>
        /// <param name="ip">IP address, or auto. Example: ip=auto</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ForecastHourly> Ip5Async(string ip, double? days, Units23? units, Lang23? lang, string callback, int? hours, string key)
        {
            return Ip5Async(ip, days, units, lang, callback, hours, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns a hourly forecast - Given an IP Address, or ip=auto for automatic IP lookup.</summary>
        /// <param name="ip">IP address, or auto. Example: ip=auto</param>
        /// <param name="days">Number of days to return. Default 16.</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="hours">Number of hours to return.</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>A forecast object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ForecastHourly> Ip5Async(string ip, double? days, Units23? units, Lang23? lang, string callback, int? hours, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (ip == null)
                throw new System.ArgumentNullException("ip");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/forecast/hourly/ip?");
            urlBuilder_.Append("ip=").Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (days != null) 
            {
                urlBuilder_.Append("days=").Append(System.Uri.EscapeDataString(ConvertToString(days, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hours != null) 
            {
                urlBuilder_.Append("hours=").Append(System.Uri.EscapeDataString(ConvertToString(hours, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ForecastHourly); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoryDay> Daily2Async(double lat, double lon, string start_date, string end_date, Units24? units, Lang24? lang, string callback, string key)
        {
            return Daily2Async(lat, lon, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoryDay> Daily2Async(double lat, double lon, string start_date, string end_date, Units24? units, Lang24? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (lat == null)
                throw new System.ArgumentNullException("lat");
    
            if (lon == null)
                throw new System.ArgumentNullException("lon");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/daily?");
            urlBuilder_.Append("lat=").Append(System.Uri.EscapeDataString(ConvertToString(lat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("lon=").Append(System.Uri.EscapeDataString(ConvertToString(lon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoryDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given a City ID</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoryDay> City5Async(string city_id, string start_date, string end_date, Units25? units, Lang25? lang, string callback, string key)
        {
            return City5Async(city_id, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given a City ID</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoryDay> City5Async(string city_id, string start_date, string end_date, Units25? units, Lang25? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city_id == null)
                throw new System.ArgumentNullException("city_id");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/daily/city?");
            urlBuilder_.Append("city_id=").Append(System.Uri.EscapeDataString(ConvertToString(city_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoryDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given a Postal Code</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoryDay> Postal5Async(string postal_code, string country, string start_date, string end_date, Units26? units, Lang26? lang, string callback, string key)
        {
            return Postal5Async(postal_code, country, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given a Postal Code</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoryDay> Postal5Async(string postal_code, string country, string start_date, string end_date, Units26? units, Lang26? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (postal_code == null)
                throw new System.ArgumentNullException("postal_code");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/daily/postal?");
            urlBuilder_.Append("postal_code=").Append(System.Uri.EscapeDataString(ConvertToString(postal_code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoryDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given City and/or State, Country.</summary>
        /// <param name="city">City search. Example: city=Raleigh,NC OR city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoryDay> Geosearch5Async(string city, string state, string country, string start_date, string end_date, Units27? units, Lang27? lang, string callback, string key)
        {
            return Geosearch5Async(city, state, country, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given City and/or State, Country.</summary>
        /// <param name="city">City search. Example: city=Raleigh,NC OR city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoryDay> Geosearch5Async(string city, string state, string country, string start_date, string end_date, Units27? units, Lang27? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city == null)
                throw new System.ArgumentNullException("city");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/daily/geosearch?");
            urlBuilder_.Append("city=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (state != null) 
            {
                urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoryDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given IP Address, or auto.</summary>
        /// <param name="ip">IP Address, or auto. Example: ip=auto</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoryDay> Ip6Async(string ip, string start_date, string end_date, Units28? units, Lang28? lang, string callback, string key)
        {
            return Ip6Async(ip, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given IP Address, or auto.</summary>
        /// <param name="ip">IP Address, or auto. Example: ip=auto</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoryDay> Ip6Async(string ip, string start_date, string end_date, Units28? units, Lang28? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (ip == null)
                throw new System.ArgumentNullException("ip");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/daily/ip?");
            urlBuilder_.Append("ip=").Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoryDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given a station USAF-WBAN ID.</summary>
        /// <param name="station">Station USAF-WBAN ID.</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoryDay> Station2Async(string station, string start_date, string end_date, Units29? units, Lang29? lang, string callback, string key)
        {
            return Station2Async(station, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given a station USAF-WBAN ID.</summary>
        /// <param name="station">Station USAF-WBAN ID.</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Day Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoryDay> Station2Async(string station, string start_date, string end_date, Units29? units, Lang29? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (station == null)
                throw new System.ArgumentNullException("station");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/daily/station?");
            urlBuilder_.Append("station=").Append(System.Uri.EscapeDataString(ConvertToString(station, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoryDay); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryDay>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<History> Hourly2Async(double lat, double lon, string start_date, string end_date, Units30? units, Lang30? lang, string callback, string key)
        {
            return Hourly2Async(lat, lon, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given a lat/lon.</summary>
        /// <param name="lat">Latitude component of location.</param>
        /// <param name="lon">Longitude component of location.</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<History> Hourly2Async(double lat, double lon, string start_date, string end_date, Units30? units, Lang30? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (lat == null)
                throw new System.ArgumentNullException("lat");
    
            if (lon == null)
                throw new System.ArgumentNullException("lon");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/hourly?");
            urlBuilder_.Append("lat=").Append(System.Uri.EscapeDataString(ConvertToString(lat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("lon=").Append(System.Uri.EscapeDataString(ConvertToString(lon, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(History); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<History>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given a City ID</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<History> City6Async(string city_id, string start_date, string end_date, Units31? units, Lang31? lang, string callback, string key)
        {
            return City6Async(city_id, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given a City ID</summary>
        /// <param name="city_id">City ID. Example: 4487042</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<History> City6Async(string city_id, string start_date, string end_date, Units31? units, Lang31? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city_id == null)
                throw new System.ArgumentNullException("city_id");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/hourly/city?");
            urlBuilder_.Append("city_id=").Append(System.Uri.EscapeDataString(ConvertToString(city_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(History); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<History>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given a Postal Code</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<History> Postal6Async(string postal_code, string country, string start_date, string end_date, Units32? units, Lang32? lang, string callback, string key)
        {
            return Postal6Async(postal_code, country, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given a Postal Code</summary>
        /// <param name="postal_code">Postal Code. Example: 28546</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH)</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<History> Postal6Async(string postal_code, string country, string start_date, string end_date, Units32? units, Lang32? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (postal_code == null)
                throw new System.ArgumentNullException("postal_code");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/hourly/postal?");
            urlBuilder_.Append("postal_code=").Append(System.Uri.EscapeDataString(ConvertToString(postal_code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(History); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<History>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given City and/or State, Country.</summary>
        /// <param name="city">City search. Example: city=Raleigh,NC OR city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<History> Geosearch6Async(string city, string state, string country, string start_date, string end_date, Units33? units, Lang33? lang, string callback, string key)
        {
            return Geosearch6Async(city, state, country, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given City and/or State, Country.</summary>
        /// <param name="city">City search. Example: city=Raleigh,NC OR city=Raleigh.</param>
        /// <param name="state">Full name of state.</param>
        /// <param name="country">Country Code (2 letter).</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<History> Geosearch6Async(string city, string state, string country, string start_date, string end_date, Units33? units, Lang33? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (city == null)
                throw new System.ArgumentNullException("city");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/hourly/geosearch?");
            urlBuilder_.Append("city=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (state != null) 
            {
                urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null) 
            {
                urlBuilder_.Append("country=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(History); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<History>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given IP Address, or auto.</summary>
        /// <param name="ip">IP Address, or auto. Example: ip=auto</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<History> Ip7Async(string ip, string start_date, string end_date, Units34? units, Lang34? lang, string callback, string key)
        {
            return Ip7Async(ip, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given IP Address, or auto.</summary>
        /// <param name="ip">IP Address, or auto. Example: ip=auto</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<History> Ip7Async(string ip, string start_date, string end_date, Units34? units, Lang34? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (ip == null)
                throw new System.ArgumentNullException("ip");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/hourly/ip?");
            urlBuilder_.Append("ip=").Append(System.Uri.EscapeDataString(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(History); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<History>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns Historical Observations - Given a station USAF-WBAN ID.</summary>
        /// <param name="station">Station USAF-WBAN ID.</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<History> Station3Async(string station, string start_date, string end_date, Units35? units, Lang35? lang, string callback, string key)
        {
            return Station3Async(station, start_date, end_date, units, lang, callback, key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Returns Historical Observations - Given a station USAF-WBAN ID.</summary>
        /// <param name="station">Station USAF-WBAN ID.</param>
        /// <param name="start_date">Start Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="end_date">End Date (YYYY-MM-DD or YYYY-MM-DD:HH).</param>
        /// <param name="units">Convert to units. Default Metric See <a href='/api/requests'>units field description</a></param>
        /// <param name="lang">Language (Default: English) See <a href='/api/requests'>language field description</a></param>
        /// <param name="callback">Wraps return in jsonp callback. Example: callback=func</param>
        /// <param name="key">Your registered API key.</param>
        /// <returns>An Historical Data Object.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<History> Station3Async(string station, string start_date, string end_date, Units35? units, Lang35? lang, string callback, string key, System.Threading.CancellationToken cancellationToken)
        {
            if (station == null)
                throw new System.ArgumentNullException("station");
    
            if (start_date == null)
                throw new System.ArgumentNullException("start_date");
    
            if (end_date == null)
                throw new System.ArgumentNullException("end_date");
    
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/history/hourly/station?");
            urlBuilder_.Append("station=").Append(System.Uri.EscapeDataString(ConvertToString(station, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("start_date=").Append(System.Uri.EscapeDataString(ConvertToString(start_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("end_date=").Append(System.Uri.EscapeDataString(ConvertToString(end_date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (units != null) 
            {
                urlBuilder_.Append("units=").Append(System.Uri.EscapeDataString(ConvertToString(units, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lang != null) 
            {
                urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (callback != null) 
            {
                urlBuilder_.Append("callback=").Append(System.Uri.EscapeDataString(ConvertToString(callback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(History); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<History>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<Error>("No Data.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Download pre-generated bulk datasets</summary>
        /// <param name="key">Your registered API key.</param>
        /// <returns>No Data.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Error> FilesAsync(string key)
        {
            return FilesAsync(key, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Download pre-generated bulk datasets</summary>
        /// <param name="key">Your registered API key.</param>
        /// <returns>No Data.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Error> FilesAsync(string key, System.Threading.CancellationToken cancellationToken)
        {
            if (key == null)
                throw new System.ArgumentNullException("key");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/bulk/files/{file}.json.gz?");
            urlBuilder_.Append("key=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Error); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ForecastHour 
    {
        /// <summary>(UTC) Date in format "YYYY-MM-DD:HH"</summary>
        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datetime { get; set; }
    
        /// <summary>Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ts { get; set; }
    
        /// <summary>Accumulated snowfall since last forecast point. Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("snow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Snow { get; set; }
    
        /// <summary>6 hour accumulated snowfall. Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("snow6h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Snow6h { get; set; }
    
        /// <summary>Accumulated precipitation since last forecast point. Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("precip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Precip { get; set; }
    
        /// <summary>Accumulated precipitation since last forecast point. Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("precip6h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Precip6h { get; set; }
    
        /// <summary>Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temp { get; set; }
    
        /// <summary>Dewpoint - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("dewpt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Dewpt { get; set; }
    
        /// <summary>Apparent Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("app_temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? App_temp { get; set; }
    
        /// <summary>Relative Humidity as a percentage (%)</summary>
        [Newtonsoft.Json.JsonProperty("rh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rh { get; set; }
    
        /// <summary>Cloud cover as a percentage (%)</summary>
        [Newtonsoft.Json.JsonProperty("clouds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Clouds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weather Weather { get; set; }
    
        /// <summary>Mean Sea level pressure (mb)</summary>
        [Newtonsoft.Json.JsonProperty("slp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Slp { get; set; }
    
        /// <summary>Pressure (mb)</summary>
        [Newtonsoft.Json.JsonProperty("pres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pres { get; set; }
    
        /// <summary>UV Index</summary>
        [Newtonsoft.Json.JsonProperty("uv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Uv { get; set; }
    
        /// <summary>Visibility - Default (KM)</summary>
        [Newtonsoft.Json.JsonProperty("vis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vis { get; set; }
    
        /// <summary>Chance of Precipitation as a percentage (%)</summary>
        [Newtonsoft.Json.JsonProperty("pop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pop { get; set; }
    
        /// <summary>Wind Speed - Default (m/s)</summary>
        [Newtonsoft.Json.JsonProperty("wind_spd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Wind_spd { get; set; }
    
        /// <summary>Wind direction</summary>
        [Newtonsoft.Json.JsonProperty("wind_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wind_dir { get; set; }
    
        /// <summary>Cardinal wind direction</summary>
        [Newtonsoft.Json.JsonProperty("wind_cdir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wind_cdir { get; set; }
    
        /// <summary>Cardinal wind direction (text)</summary>
        [Newtonsoft.Json.JsonProperty("wind_cdir_full", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wind_cdir_full { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ForecastHour FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHour>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Forecast 
    {
        /// <summary>(UTC) Date in format "YYYY-MM-DD"</summary>
        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datetime { get; set; }
    
        /// <summary>Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ts { get; set; }
    
        /// <summary>Accumulated snowfall since last forecast point. Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("snow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Snow { get; set; }
    
        /// <summary>Accumulated precipitation since last forecast point. Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("precip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Precip { get; set; }
    
        /// <summary>Temperature (Average) - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temp { get; set; }
    
        /// <summary>Dewpoint (Average) - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("dewpt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Dewpt { get; set; }
    
        /// <summary>Maximum daily Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("max_temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max_temp { get; set; }
    
        /// <summary>Minimum daily Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("min_temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min_temp { get; set; }
    
        /// <summary>Apparent Maximum daily Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("app_max_temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? App_max_temp { get; set; }
    
        /// <summary>Apparent Minimum daily Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("app_min_temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? App_min_temp { get; set; }
    
        /// <summary>Relative Humidity as a percentage (%)</summary>
        [Newtonsoft.Json.JsonProperty("rh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rh { get; set; }
    
        /// <summary>Cloud cover as a percentage (%)</summary>
        [Newtonsoft.Json.JsonProperty("clouds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Clouds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weather2 Weather { get; set; }
    
        /// <summary>Mean Sea level pressure (mb)</summary>
        [Newtonsoft.Json.JsonProperty("slp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Slp { get; set; }
    
        /// <summary>Pressure (mb)</summary>
        [Newtonsoft.Json.JsonProperty("pres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pres { get; set; }
    
        /// <summary>UV Index</summary>
        [Newtonsoft.Json.JsonProperty("uv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Uv { get; set; }
    
        /// <summary>Average Visibility default (KM)</summary>
        [Newtonsoft.Json.JsonProperty("vis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vis { get; set; }
    
        /// <summary>Chance of Precipitation as a percentage (%)</summary>
        [Newtonsoft.Json.JsonProperty("pop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pop { get; set; }
    
        /// <summary>Wind Speed (default m/s)</summary>
        [Newtonsoft.Json.JsonProperty("wind_spd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Wind_spd { get; set; }
    
        /// <summary>Wind direction</summary>
        [Newtonsoft.Json.JsonProperty("wind_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wind_dir { get; set; }
    
        /// <summary>Cardinal wind direction</summary>
        [Newtonsoft.Json.JsonProperty("wind_cdir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wind_cdir { get; set; }
    
        /// <summary>Cardinal wind direction (text)</summary>
        [Newtonsoft.Json.JsonProperty("wind_cdir_full", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wind_cdir_full { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Forecast FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Forecast>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class HistoryObj 
    {
        /// <summary>Date in format "YYYY-MM-DD:HH" for non-daily. "YYYY-MM-DD" for Daily. All datetime is in (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datetime { get; set; }
    
        /// <summary>Mean Sea level pressure (mb)</summary>
        [Newtonsoft.Json.JsonProperty("slp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Slp { get; set; }
    
        /// <summary>Relative Humidity as a percentage (%)</summary>
        [Newtonsoft.Json.JsonProperty("rh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rh { get; set; }
    
        /// <summary>Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temp { get; set; }
    
        /// <summary>Wind Speed - Default (m/s)</summary>
        [Newtonsoft.Json.JsonProperty("wind_spd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Wind_spd { get; set; }
    
        /// <summary>Wind direction - (Degrees)</summary>
        [Newtonsoft.Json.JsonProperty("wind_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wind_dir { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weather3 Weather { get; set; }
    
        /// <summary>Measured Precipitation - Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("precip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Precip { get; set; }
    
        /// <summary>Set to 0 measurement has not yet been quality controlled, and should not be considered an authoritative observation</summary>
        [Newtonsoft.Json.JsonProperty("qc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Qc { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HistoryObj FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryObj>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class HistoryDayObj 
    {
        /// <summary>Date in format "YYYY-MM-DD". All datetime is in (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datetime { get; set; }
    
        /// <summary>Unix Timestamp of datetime (Midnight UTC)</summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ts { get; set; }
    
        /// <summary>Average Mean Sea level pressure (mb)</summary>
        [Newtonsoft.Json.JsonProperty("slp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Slp { get; set; }
    
        /// <summary>Average Relative Humidity as a percentage (%)</summary>
        [Newtonsoft.Json.JsonProperty("rh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rh { get; set; }
    
        /// <summary>Average Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temp { get; set; }
    
        /// <summary>Max Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("max_temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max_temp { get; set; }
    
        /// <summary>Time of Max Temperature - Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("max_temp_ts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max_temp_ts { get; set; }
    
        /// <summary>Min Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("min_temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min_temp { get; set; }
    
        /// <summary>Time of Max Temperature - Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("min_temp_ts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min_temp_ts { get; set; }
    
        /// <summary>Average Wind Speed - Default (m/s)</summary>
        [Newtonsoft.Json.JsonProperty("wind_spd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Wind_spd { get; set; }
    
        /// <summary>Average Wind Speed - Default (m/s)</summary>
        [Newtonsoft.Json.JsonProperty("max_wind_spd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max_wind_spd { get; set; }
    
        /// <summary>Time of max wind - Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("max_wind_spd_ts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max_wind_spd_ts { get; set; }
    
        /// <summary>Average Wind direction - (Degrees)</summary>
        [Newtonsoft.Json.JsonProperty("wind_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wind_dir { get; set; }
    
        /// <summary>Direction of wind at time of max wind - (Degrees)</summary>
        [Newtonsoft.Json.JsonProperty("max_wind_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max_wind_dir { get; set; }
    
        /// <summary>Total Measured Precipitation - Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("precip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Precip { get; set; }
    
        /// <summary>Total Measured Precipitation - Use for stations reporting 6 hour precip - Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("precip6h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Precip6h { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HistoryDayObj FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryDayObj>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ForecastDay 
    {
        /// <summary>City Name</summary>
        [Newtonsoft.Json.JsonProperty("city_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City_name { get; set; }
    
        /// <summary>State Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("state_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State_code { get; set; }
    
        /// <summary>Country Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code { get; set; }
    
        /// <summary>Latitude</summary>
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lat { get; set; }
    
        /// <summary>Longitude</summary>
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lon { get; set; }
    
        /// <summary>Local IANA time zone</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Forecast> Data { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ForecastDay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastDay>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ForecastHourly 
    {
        /// <summary>City Name</summary>
        [Newtonsoft.Json.JsonProperty("city_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City_name { get; set; }
    
        /// <summary>State Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("state_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State_code { get; set; }
    
        /// <summary>Country Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code { get; set; }
    
        /// <summary>Latitude</summary>
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lat { get; set; }
    
        /// <summary>Longitude</summary>
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lon { get; set; }
    
        /// <summary>Local IANA time zone</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ForecastHour> Data { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ForecastHourly FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ForecastHourly>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class GeoIPObj 
    {
        /// <summary>City Name</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }
    
        /// <summary>State Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }
    
        /// <summary>UTC Offset (deprecated)</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Offset { get; set; }
    
        /// <summary>Local IANA time zone</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    
        /// <summary>Organization Name</summary>
        [Newtonsoft.Json.JsonProperty("organization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organization { get; set; }
    
        /// <summary>Country Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("continent_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Continent_code { get; set; }
    
        /// <summary>Latitude</summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }
    
        /// <summary>Longitude</summary>
        [Newtonsoft.Json.JsonProperty("metro_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metro_code { get; set; }
    
        /// <summary>Longitude</summary>
        [Newtonsoft.Json.JsonProperty("dma_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dma_code { get; set; }
    
        /// <summary>IP Address</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }
    
        /// <summary>Country Code (Short)</summary>
        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code { get; set; }
    
        /// <summary>Area Code</summary>
        [Newtonsoft.Json.JsonProperty("area_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Area_code { get; set; }
    
        /// <summary>Postal Code</summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postal_code { get; set; }
    
        /// <summary>Character encoding</summary>
        [Newtonsoft.Json.JsonProperty("charset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Charset { get; set; }
    
        /// <summary>City Name</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Country Code (Long)</summary>
        [Newtonsoft.Json.JsonProperty("country_code3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code3 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GeoIPObj FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoIPObj>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CurrentObs 
    {
        /// <summary>City Name (Closest)</summary>
        [Newtonsoft.Json.JsonProperty("city_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City_name { get; set; }
    
        /// <summary>State Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("state_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State_code { get; set; }
    
        /// <summary>Country Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code { get; set; }
    
        /// <summary>Local IANA time zone</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    
        /// <summary>Latitude</summary>
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lat { get; set; }
    
        /// <summary>Longitude</summary>
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data Data { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CurrentObs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObs>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CurrentObsGroup 
    {
        /// <summary>Count of found observations</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CurrentObs> Data { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CurrentObsGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrentObsGroup>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class History 
    {
        /// <summary>City Name (Closest)</summary>
        [Newtonsoft.Json.JsonProperty("city_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City_name { get; set; }
    
        /// <summary>State Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("state_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State_code { get; set; }
    
        /// <summary>Country Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code { get; set; }
    
        /// <summary>Local IANA time zone</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    
        /// <summary>Latitude</summary>
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lat { get; set; }
    
        /// <summary>Longitude</summary>
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lon { get; set; }
    
        /// <summary>Station Elevation in Meters</summary>
        [Newtonsoft.Json.JsonProperty("elev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Elev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistoryObj> Data { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static History FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<History>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class HistoryDay 
    {
        /// <summary>City Name (Closest)</summary>
        [Newtonsoft.Json.JsonProperty("city_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City_name { get; set; }
    
        /// <summary>State Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("state_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State_code { get; set; }
    
        /// <summary>Country Abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code { get; set; }
    
        /// <summary>Local IANA time zone</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    
        /// <summary>Latitude</summary>
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lat { get; set; }
    
        /// <summary>Longitude</summary>
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lon { get; set; }
    
        /// <summary>Station Elevation in Meters</summary>
        [Newtonsoft.Json.JsonProperty("elev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Elev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistoryDayObj> Data { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HistoryDay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryDay>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Error 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units11
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang11
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units12
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang12
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units13
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang13
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units14
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang14
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units15
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang15
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units16
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang16
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units17
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang17
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units18
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang18
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units19
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang19
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units20
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang20
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units21
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang21
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units22
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang22
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units23
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang23
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units24
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang24
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units25
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang25
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units26
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang26
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units27
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang27
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units28
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang28
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units29
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang29
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units30
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang30
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units31
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang31
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units32
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang32
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units33
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang33
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units34
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang34
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    /// <summary>Convert to units. Default Metric See <a href='/api/requests'>units field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Units35
    {
        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 1,
    
    }
    
    /// <summary>Language (Default: English) See <a href='/api/requests'>language field description</a></summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum Lang35
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ar")]
        Ar = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"az")]
        Az = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"be")]
        Be = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bs")]
        Bs = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ca")]
        Ca = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kw")]
        Kw = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nb")]
        Nb = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sl")]
        Sl = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sr")]
        Sr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"uk")]
        Uk = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh")]
        Zh = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-tw")]
        ZhTw = 32,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Weather 
    {
        /// <summary>Icon code for forecast image display</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }
    
        /// <summary>Weather Condition code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Weather Condition description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Weather FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weather>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Weather2 
    {
        /// <summary>Icon code for forecast image display</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }
    
        /// <summary>Weather Condition code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Weather Condition description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Weather2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weather2>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Weather3 
    {
        /// <summary>Icon code for forecast image display</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }
    
        /// <summary>Weather Condition code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Weather Condition description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Weather3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weather3>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Data 
    {
        /// <summary>Station ID</summary>
        [Newtonsoft.Json.JsonProperty("station", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Station { get; set; }
    
        /// <summary>Visibility (deprecated)</summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Visibility { get; set; }
    
        /// <summary>Visibility Value (deprecated)</summary>
        [Newtonsoft.Json.JsonProperty("visibility_val", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Visibility_val { get; set; }
    
        /// <summary>Visibility - Default (KM)</summary>
        [Newtonsoft.Json.JsonProperty("vis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vis { get; set; }
    
        /// <summary>Relative Humidity (%)</summary>
        [Newtonsoft.Json.JsonProperty("rh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rh { get; set; }
    
        /// <summary>Dew Point Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("dewpt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Dewpt { get; set; }
    
        /// <summary>Wind direction (Degrees)</summary>
        [Newtonsoft.Json.JsonProperty("wind_dir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Wind_dir { get; set; }
    
        /// <summary>Cardinal wind direction</summary>
        [Newtonsoft.Json.JsonProperty("wind_cdir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wind_cdir { get; set; }
    
        /// <summary>Cardinal wind direction (text)</summary>
        [Newtonsoft.Json.JsonProperty("wind_cdir_full", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wind_cdir_full { get; set; }
    
        /// <summary>Wind Speed - Default (m/s)</summary>
        [Newtonsoft.Json.JsonProperty("wind_speed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Wind_speed { get; set; }
    
        /// <summary>Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Temp { get; set; }
    
        /// <summary>Apparent Temperature - Default (C)</summary>
        [Newtonsoft.Json.JsonProperty("app_temp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? App_temp { get; set; }
    
        /// <summary>Cloud cover (%)</summary>
        [Newtonsoft.Json.JsonProperty("clouds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Clouds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weather", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Weather4 Weather { get; set; }
    
        /// <summary>Cycle Hour (UTC) of observation</summary>
        [Newtonsoft.Json.JsonProperty("datetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datetime { get; set; }
    
        /// <summary>Full time (UTC) of observation (YYYY-MM-DD HH:MM)</summary>
        [Newtonsoft.Json.JsonProperty("ob_time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ob_time { get; set; }
    
        /// <summary>Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("ts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ts { get; set; }
    
        /// <summary>Local IANA time zone</summary>
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }
    
        /// <summary>Time (UTC) of Sunrise (HH:MM:SS)</summary>
        [Newtonsoft.Json.JsonProperty("sunrise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sunrise { get; set; }
    
        /// <summary>Time (UTC) of Sunset (HH:MM:SS)</summary>
        [Newtonsoft.Json.JsonProperty("sunset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sunset { get; set; }
    
        /// <summary>Mean sea level pressure in millibars (mb)</summary>
        [Newtonsoft.Json.JsonProperty("slp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Slp { get; set; }
    
        /// <summary>Pressure (mb)</summary>
        [Newtonsoft.Json.JsonProperty("pres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Pres { get; set; }
    
        /// <summary>UV Index</summary>
        [Newtonsoft.Json.JsonProperty("uv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Uv { get; set; }
    
        /// <summary>Precipitation in last hour - Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("precip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Precip { get; set; }
    
        /// <summary>Precipitation in last 3 hours - Default (mm)</summary>
        [Newtonsoft.Json.JsonProperty("precip3h", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Precip3h { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Data FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Weather4 
    {
        /// <summary>Icon code for forecast image display</summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }
    
        /// <summary>Weather Condition code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Weather Condition description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Weather4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Weather4>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v9.0.0.1))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v9.0.0.1))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}